{"version":3,"sources":["actions/actions.js","components/Card/Card.js","components/CardList/CardList.js","components/App/App.js","components/CardListMaker/CardListMaker.js","reducer/reducer.js","index.js"],"names":["flip","id","type","reset","connect","state","actions","color","isFlipped","isOpened","className","styles","backgroundColor","style","onClick","cards","map","item","score","maxScore","setTimeout","alert","shuffle","array","i","length","j","Math","floor","random","getRandomColor","red","green","blue","initialState","round","selectedItem","num","k","push","group","CardListMaker","reducer","action","idxCard","find","card","newState","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24211123.chunk.js","sourcesContent":["export const flip = id => ({\r\n    type: 'FLIP',\r\n    id\r\n});\r\n\r\nexport const reset = () => ({\r\n    type: 'RESET'\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../actions/actions';\r\nimport './Card.css';\r\n\r\nconst Card = ({ id, color, isFlipped, isOpened, flip }) => {\r\n    const className = isOpened ? 'card opened' : 'card';\r\n    const styles = {\r\n        backgroundColor: isFlipped ? color : null,\r\n    }\r\n    return (\r\n        <div className={className} style={styles} onClick={() => flip(id)}>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, actions)(Card);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Card from \"../Card/Card\";\r\n\r\nconst CardList = ({ cards }) => {\r\n    const cardList = cards.map(item => <Card\r\n                                        key={item.id}\r\n                                        id={item.id}\r\n                                        color={item.color}\r\n                                        isFlipped={item.isFlipped}\r\n                                        isOpened={item.isOpened}/>)\r\n    return (\r\n        cardList\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        cards: state.cards,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CardList)","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions/actions';\nimport './App.css';\nimport CardList from \"../CardList/CardList\";\n\nconst App = ({ score, maxScore, reset }) => {\n    if (score >= maxScore) {\n        setTimeout(() => alert('Congratulation! You win!'), 2000);\n        setTimeout(reset, 5000);\n    }\n    return (\n        <div className=\"game-field\">\n            <CardList />\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        score: state.score,\n        maxScore: state.maxScore\n    }\n}\n\nexport default connect(mapStateToProps, actions)(App);\n","export const CardListMaker = (num = 16) => {\r\n    const cards = [];\r\n    for (let i = 1; i <= num; i += 2) {\r\n        const color = getRandomColor();\r\n        for (let k = i; k <= i+1; k++) {\r\n            cards.push({\r\n                id: k,\r\n                group: i,\r\n                color,\r\n                isFlipped: false,\r\n                isOpened: false\r\n            })\r\n        }\r\n    }\r\n    return shuffle(cards);\r\n};\r\n\r\n//перемешивание массива\r\nconst shuffle = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}\r\n\r\nconst getRandomColor = () => {\r\n    const red = Math.floor( Math.random() * 255 );\r\n    const green = Math.floor( Math.random() * 255 );\r\n    const blue = Math.floor( Math.random() * 255 );\r\n    return `rgb( ${red}, ${green}, ${blue} ) `;\r\n}","import { CardListMaker } from '../components/CardListMaker/CardListMaker';\r\n\r\nconst initialState = {\r\n    round: 1,\r\n    selectedItem: null,\r\n    score: 0,\r\n    maxScore: 16, //количество карт = условие победы\r\n    cards: CardListMaker()\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    if (action.type === 'FLIP') {\r\n        const idxCard = state.cards.find(card => card.id === action.id)\r\n        //проверка, не пытаемся ли открыть открытую карту\r\n        if (idxCard.isFlipped || idxCard.isOpened) return state;\r\n\r\n        let newState = { };\r\n        let round = state.round + 1\r\n\r\n        //если раунд нечетный (открываем первую карту в паре)\r\n        if (state.round % 2 === 1){\r\n\r\n            //записываем группу выбранной карты в хранилище\r\n            newState = {round,\r\n                selectedItem: idxCard.group,\r\n                score: state.score,\r\n                maxScore: state.maxScore,\r\n                cards: state.cards.map(card => {\r\n                return card.id === action.id ?\r\n                    {...card, isFlipped: true} :\r\n                    {...card, isFlipped: false}\r\n                })} ;\r\n        }\r\n        //если раунд четный (открываем вторую карту в паре)\r\n        if(state.round % 2 === 0){\r\n\r\n            //если группа открытой карты совпадает с записанной в хранилище, то меняем флаги на true\r\n            if(idxCard.group === state.selectedItem){\r\n                newState = {round,\r\n                    score: state.score + 2,\r\n                    maxScore: state.maxScore,\r\n                    selectedItem: state.selectedItem,\r\n                    cards: state.cards.map(card => {\r\n                        return (card.id === action.id || card.group === state.selectedItem) ?\r\n                            {...card, isFlipped: true, isOpened: true } :\r\n                            card\r\n                    })\r\n                }\r\n            }\r\n            //если группа открытой карты не совпадает с записанной в хранилище, то просто показываем её\r\n            if(idxCard.group !== state.selectedItem){\r\n                newState = {round,\r\n                    score: state.score,\r\n                    maxScore: state.maxScore,\r\n                    selectedItem: state.selectedItem,\r\n                    cards: state.cards.map(card => {\r\n                        return card.id === action.id ?\r\n                            {...card, isFlipped: true} :\r\n                            card\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        return newState;\r\n    }\r\n    if (action.type === 'RESET') return initialState;\r\n    return state;\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport {createStore} from \"redux\";\nimport {Provider} from 'react-redux';\nimport reducer from './reducer/reducer';\nimport './index.css';\n\nconst store = createStore(reducer);\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}